//Expected TC : O(N) | SC : O(N) => we cna take extra array of same size. ( i haven't paid attention on space compexity)

SOLUTION (1): BY OP 
--------------------
class Solution{
    public:
    void segregateElements(int arr[],int n)
    {   int temp;
        // Your code goes here
        for(int i=0,j=1;j<n;)
        {   
            if(arr[i]<0)
            {
                if(arr[j]>=0)
                {
                    swap(arr[i],arr[j]);
                    i++;j++;
                }
                else if(arr[j]<0)
                {
                j++;
                }
            }
            else
            {
                i++;
                j++;
            }
            
        }
        }
        //for(int i=0;i<n;i++)
        //cout<<arr[i];
    
};

// the above approach was my approach , it serves the purpose but it is not stable is it dosen't preservs the order.


SOLUTION (2) : by most of the guys (they used extra array it was very easy)
--------------------------------------
class Solution{
    public:
    void segregateElements(int arr[],int n)
    {
       // Your code goes here
       vector<int>ans;
       for(int i=0;i<n;i++)
       {
           if(arr[i]>0)
           {
               ans.push_back(arr[i]);
           }
       }
       for(int i=0;i<n;i++)
       {
           if(arr[i]<0)
           {
               ans.push_back(arr[i]);
           }
       }
       for(int i=0;i<n;i++)
       {
           arr[i]=ans[i];
       }
    }
};


//Doing this question with O(N) tc and O(1) sc and also order preserving is not possible.
